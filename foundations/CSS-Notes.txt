CSS Notes
----------------------------------------------------------------------------------
universal selector - will select any element of any type
syntax: * {
	
}

type selector - will select all elements of the given type
syntax: div {
	
}
(the type is div)

class selector - will select elements with the given class, classes are attributes you place on an HTML element

in HTML:
<div class="class-name">Text here</div>

in CSS:
.class-name {
	
}
(Note: you can add multiple classes to an element, just separate them by a space)

ID selector - similar to class selectors, they select an element with the given ID

in HTML:
<div id="ID-name">Text here</div>

in CSS:
#ID-name {
	
}

difference between classes and ID: an element can only have one ID. An ID cannot be repeated on a single page, and the ID attribute should not contain any whitespace at all

grouping selector - we can group selectors that have the same properties to cut down on repetition

.read,
.unread {
	color: white;
	background-color: black;
}

(we can then make our unique declarations)

.read {
	unique declarations
}

.unread {
	unique declarations
}

chaining sectors - if we have two elements, and want to apply a seperature rule for when those elements are used together only

in HTML:
<div class="subsection header">Latest Posts</div>
<p class="subsection preview">This is where a preview for a post might go.</p>

in CSS
.subsection.header {
	color: red;
}
(can also be used to chain a ID and class together)
in CSS:
.class#ID {
	
}
----------------------------------------------------------------------------------
combinator - allow us to combine multiple selectors differently than either grouping or chaining them, as they show a relationship between sectors

descendant combinator - will only cause elements that match the last selector to be selected if they also have an ancestor that matches the previous selector

in HTML:
<div class="ancestor">
	<div class="contents">
		<div class="contents">

in CSS:
.ancestor .contents {
	
}
(both contents would be effected since they are nested inside ancestor)
----------------------------------------------------------------------------------
color - sets color of text
background-color - background color of element
Example: color: red

both these properties can accept keywords (such as red and transparent) or HEX, RGB, and HSL values
----------------------------------------------------------------------------------
font-family - what font an element uses

Fonts fall into two categories:
font family names - "DejaVu Sans"
generic family name - sans-serif

Good practice to start with font you want most to be used, than what the browser should fall back to.
Example: font-family: "DejaVu Sans", sans-serif

font-size - sets the size of the font
Ex: font-size: 22px

font-weight - affects the boldness of the text
Ex: font-weight: bold

Can accept keywords, or a number between 1 and 1000 (Note: 700=bold)

text-align - will align text horizontally within an element
Ex: text-align: center
----------------------------------------------------------------------------------
img height & width - using a value of 'auto' for height and only adjusting the width value would not allow the image to lose its proportions.

img {
	height: auto;
	width: 500px;
}